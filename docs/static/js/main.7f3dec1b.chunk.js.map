{"version":3,"sources":["Global.js","Login.js","LinkList.js","App.js","serviceWorker.js","index.js"],"names":["_","app","Login","state","user","password","this","onChange","bind","onSubmit","target","_ref","name","value","setState","event","_this2","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","then","json","props","onLogin","catch","reason","console","error","react_default","a","createElement","className","type","React","Component","LinkList","entries","getLinks","api_key","res","log","map","entry","index","key","href","url","label","App","logout","getUser","fromStorage","localStorage","getItem","parse","setItem","removeItem","onClick","src_LinkList","src_Login_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAAaA,EAAI,qBACNC,EAAM,mBCgEFC,6MAtDXC,MAAQ,CACJC,KAAM,GACNC,SAAU,wFAIVC,KAAKC,SAAWD,KAAKC,SAASC,KAAKF,MACnCA,KAAKG,SAAWH,KAAKG,SAASD,KAAKF,0CAGlB,IAAVI,EAAUC,EAAVD,OACHP,EAAQG,KAAKH,MACjBA,EAAMO,EAAOE,MAAQF,EAAOG,MAC5BP,KAAKQ,SAASX,oCAGTY,GAAO,IAAAC,EAAAV,KACZS,EAAME,iBAENC,MAAMlB,EAAI,6DAA8D,CACpEmB,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUlB,KAAKH,SAEzBsB,KAAK,SAAArB,GAAI,OAAIA,EAAKsB,SAClBD,KAAK,SAAArB,GACFY,EAAKW,MAAMC,QAAQxB,KAEtByB,MAAM,SAAAC,GAAM,OAAIC,QAAQC,MAAMF,sCAInC,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAM1B,SAAUH,KAAKG,UACjBwB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOvB,KAAK,OAAOwB,UAAU,2BAA2BC,KAAK,OAAOxB,MAAOP,KAAKH,MAAMC,KAAMG,SAAUD,KAAKC,YAG/G0B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,SAAOvB,KAAK,WAAWwB,UAAU,2BAA2BC,KAAK,WAAWxB,MAAOP,KAAKH,MAAME,SAAUE,SAAUD,KAAKC,YAG3H0B,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,mBAAhC,mBAnDJE,IAAMC,WCoCXC,6MAlCXrC,MAAQ,CACJsC,QAAS,uFAITnC,KAAKoC,8CAGE,IAAA1B,EAAAV,KACPY,MAAMlB,EAAI,qCFXVC,GAAOA,EAAIE,MAAMC,KACVH,EAAIE,MAAMC,KAAKuC,QAGf,OEQFlB,KAAK,SAAAmB,GAAG,OAAIA,EAAIlB,SAChBD,KAAK,SAAAmB,GACFb,QAAQc,IAAID,GACZ5B,EAAKF,SAAS,CACV2B,QAASG,EAAIH,6CAMzB,OACIR,EAAAC,EAAAC,cAAA,WACK7B,KAAKH,MAAMsC,QAAQK,IAAI,SAACC,EAAOC,GAAR,OACpBf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,GACNf,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGe,KAAMH,EAAMI,KAAMJ,EAAMK,mBA5BhCd,IAAMC,WC+Ddc,6MA3DXlD,MAAQ,CACJC,KAAM,0FAINE,KAAKsB,QAAUtB,KAAKsB,QAAQpB,KAAKF,MACjCA,KAAKgD,OAAShD,KAAKgD,OAAO9C,KAAKF,MHZnCL,EGcWK,KAEPA,KAAKQ,SAAS,CACVV,KAAME,KAAKiD,8CAKf,IACMC,EAAcC,aAAaC,QAAQ,QAOzC,OANIF,EACOjC,KAAKoC,MAAMH,GAGX,qCAKPpD,GACJE,KAAKQ,SAAS,CAAEV,SAChBqD,aAAaG,QAAQ,OAAQrC,KAAKC,UAAUpB,qCAI5CE,KAAKQ,SAAS,CAAEV,KAAM,OACtBqD,aAAaI,WAAW,yCAIxB,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEV9B,KAAKH,MAAMC,KACR6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,sBAAc7B,KAAKH,MAAMC,KAAKQ,KAA9B,KAEAqB,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,eAAe0B,QAASxD,KAAKgD,QAA7D,UAEArB,EAAAC,EAAAC,cAAC4B,EAAD,QAIR9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOpC,QAAStB,KAAKsB,kBArDvBW,aCIE0B,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCXZC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GAC/BA,EAAaC","file":"static/js/main.7f3dec1b.chunk.js","sourcesContent":["export const _ = \"https://one.lgk.io\";\r\nexport let app = {};\r\nexport function setApp(component) {\r\n    app = component;\r\n}\r\nexport function getUserApiKey() {\r\n    if (app && app.state.user) {\r\n        return app.state.user.api_key;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { _ } from \"./Global\";\r\nimport \"./Login.css\";\r\n\r\nclass Login extends React.Component {\r\n    static propTypes = {\r\n        onLogin: PropTypes.func\r\n    };\r\n\r\n    state = {\r\n        user: \"\",\r\n        password: \"\"\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange({ target }) {\r\n        let state = this.state;\r\n        state[target.name] = target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        fetch(_ + \"/api/cockpit/authUser?token=3756c4b4f17f87b4e752afe3feab99\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(user => user.json())\r\n            .then(user => {\r\n                this.props.onLogin(user);\r\n            })\r\n            .catch(reason => console.error(reason));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Login slide bg bg-primary py-5\">\r\n                <div className=\"container\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <label className=\"Login-label mb-3\">\r\n                            <span>Username</span>\r\n                            <input name=\"user\" className=\"Login-input form-control\" type=\"text\" value={this.state.user} onChange={this.onChange} />\r\n                        </label>\r\n\r\n                        <label className=\"Login-label mb-3\">\r\n                            <span>Password</span>\r\n                            <input name=\"password\" className=\"Login-input form-control\" type=\"password\" value={this.state.password} onChange={this.onChange} />\r\n                        </label>\r\n\r\n                        <button type=\"submit\" className=\"btn lg btn-dark\">Login</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { _, getUserApiKey } from \"./Global\";\r\n\r\nclass LinkList extends React.Component {\r\n    static propTypes = {};\r\n\r\n    state = {\r\n        entries: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getLinks();\r\n    }\r\n\r\n    getLinks() {\r\n        fetch(_ + \"/api/collections/get/links?token=\" + getUserApiKey())\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    entries: res.entries\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.entries.map((entry, index) =>\r\n                    <div key={index}>\r\n                        <h3>\r\n                            <a href={entry.url}>{entry.label}</a>\r\n                        </h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LinkList;","import React, { Component } from \"react\";\n\nimport { setApp } from \"./Global\";\nimport \"./App.css\";\n\nimport Login from \"./Login\";\nimport LinkList from \"./LinkList\";\n\nclass App extends Component {\n    state = {\n        user: null\n    };\n\n    componentWillMount() {\n        this.onLogin = this.onLogin.bind(this);\n        this.logout = this.logout.bind(this);\n\n        setApp(this);\n\n        this.setState({\n            user: this.getUser()\n        });\n    }\n\n    getUser() {\n        let user;\n        const fromStorage = localStorage.getItem(\"user\");\n        if (fromStorage) {\n            user = JSON.parse(fromStorage);\n        }\n        else {\n            user = null;\n        }\n        return user;\n    }\n\n    onLogin(user) {\n        this.setState({ user });\n        localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    logout() {\n        this.setState({ user: null });\n        localStorage.removeItem(\"user\");\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                {this.state.user ?\n                    <div className=\"slide bg bg-dark text-light\">\n                        <div className=\"container\">\n                            <h1>Welcome, {this.state.user.name}!</h1>\n\n                            <button type=\"button\" className=\"btn blink lg\" onClick={this.logout}>Logout</button>\n\n                            <LinkList />\n                        </div>\n                    </div>\n                    :\n                    <Login onLogin={this.onLogin} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}